#
# CAVS passthrough capture pipeline
#
# A simple passthrough pipeline. All attributes defined herein are namespaced
# by alsatplg to "Object.Pipeline.passthrough-capture.N.attribute_name".
#
# Usage: passthrough-capture pipeline object can be instantiated as:
#
# Object.Pipeline.passthrough-capture."N" {
# 	period		1000
# 	time_domain	"timer"
# 	channels	2
# 	rate		48000
# }
#
# Where N is the unique pipeline ID within the same alsaconf node.
#

<include/common/audio_format.conf>
<include/components/copier.conf>
<include/components/pipeline.conf>

Class.Pipeline."passthrough-capture" {

	DefineAttribute."index" {}

	<include/pipelines/pipeline-common.conf>

	attributes {
		!constructor [
			"index"
		]

		!immutable [
			"direction"
		]

		#
		# passthrough-capture objects instantiated within the same alsaconf node must have
		# unique pipeline_id attribute
		#
		unique	"instance"
	}

	Object.Widget {
		copier."1" {
			copier_type	"host"
			type	"aif_out"
			node_type $HDA_HOST_INPUT_CLASS
			num_audio_formats 6
			num_input_audio_formats 6
			num_output_audio_formats 6
			# 16-bit output format 48KHz 2ch. Input sample format is always 32-bit for capture
			Object.Base.audio_format.1 {
				in_bit_depth		32
				in_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
			# 24-bit 48KHz 2ch
			Object.Base.audio_format.2 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	24
				dma_buffer_size "$[$obs * 2]"
			}
			# 32-bit 48KHz 2ch
			Object.Base.audio_format.3 {
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				dma_buffer_size "$[$obs * 2]"
			}
			# 16-bit output format 48KHz 4ch. Input sample format is always 32-bit for capture
			Object.Base.audio_format.4 {
				in_channels		4
				in_bit_depth		32
				in_valid_bit_depth	32
				out_channels		4
				dma_buffer_size "$[$obs * 2]"
				in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				in_ch_map	$CHANNEL_MAP_3_POINT_1
				out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				out_ch_map	$CHANNEL_MAP_3_POINT_1
			}
			# 24-bit 48KHz 2ch
			Object.Base.audio_format.5 {
				in_channels		4
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	24
				out_channels		4
				dma_buffer_size "$[$obs * 2]"
				in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				in_ch_map	$CHANNEL_MAP_3_POINT_1
				out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				out_ch_map	$CHANNEL_MAP_3_POINT_1
			}
			# 32-bit 48KHz 4ch
			Object.Base.audio_format.6 {
				in_channels		4
				in_bit_depth		32
				in_valid_bit_depth	32
				out_bit_depth		32
				out_valid_bit_depth	32
				out_channels		4
				dma_buffer_size "$[$obs * 2]"
				in_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				in_ch_map	$CHANNEL_MAP_3_POINT_1
				out_ch_cfg	$CHANNEL_CONFIG_3_POINT_1
				out_ch_map	$CHANNEL_MAP_3_POINT_1
			}
		}

		pipeline."1" {
			priority	0
			lp_mode		0
		}
	}

	direction	"capture"
	dynamic_pipeline 1
	time_domain	"timer"
	channels	2
	channels_min	2
	channels_max	2
	rate		48000
	rate_min	48000
	rate_max	48000
}
